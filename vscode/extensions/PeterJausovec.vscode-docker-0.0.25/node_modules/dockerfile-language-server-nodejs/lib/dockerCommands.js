/* --------------------------------------------------------------------------------------------
 * Copyright (c) Remy Suen. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_1 = require("vscode-languageserver");
const dockerfile_utils_1 = require("dockerfile-utils");
class CommandIds {
}
CommandIds.LOWERCASE = "docker.command.convertToLowercase";
CommandIds.UPPERCASE = "docker.command.convertToUppercase";
CommandIds.EXTRA_ARGUMENT = "docker.command.removeExtraArgument";
CommandIds.DIRECTIVE_TO_BACKTICK = "docker.command.directiveToBacktick";
CommandIds.DIRECTIVE_TO_BACKSLASH = "docker.command.directiveToBackslash";
CommandIds.FLAG_TO_CHOWN = "docker.command.flagToChown";
CommandIds.FLAG_TO_COPY_FROM = "docker.command.flagToCopyFrom";
CommandIds.FLAG_TO_HEALTHCHECK_INTERVAL = "docker.command.flagToHealthcheckInterval";
CommandIds.FLAG_TO_HEALTHCHECK_RETRIES = "docker.command.flagToHealthcheckRetries";
CommandIds.FLAG_TO_HEALTHCHECK_START_PERIOD = "docker.command.flagToHealthcheckStartPeriod";
CommandIds.FLAG_TO_HEALTHCHECK_TIMEOUT = "docker.command.flagToHealthcheckTimeout";
CommandIds.CONVERT_TO_AS = "docker.command.convertToAS";
exports.CommandIds = CommandIds;
class DockerCommands {
    analyzeDiagnostics(diagnostics, textDocumentURI) {
        let commands = [];
        for (let i = 0; i < diagnostics.length; i++) {
            // Diagnostic's code is (number | string), convert it if necessary
            if (typeof diagnostics[i].code === "string") {
                diagnostics[i].code = parseInt(diagnostics[i].code);
            }
            switch (diagnostics[i].code) {
                case dockerfile_utils_1.ValidationCode.CASING_DIRECTIVE:
                    commands.push({
                        title: "Convert directive to lowercase",
                        command: CommandIds.LOWERCASE,
                        arguments: [textDocumentURI, diagnostics[i].range]
                    });
                    break;
                case dockerfile_utils_1.ValidationCode.CASING_INSTRUCTION:
                    commands.push({
                        title: "Convert instruction to uppercase",
                        command: CommandIds.UPPERCASE,
                        arguments: [textDocumentURI, diagnostics[i].range]
                    });
                    break;
                case dockerfile_utils_1.ValidationCode.ARGUMENT_EXTRA:
                    commands.push({
                        title: "Remove extra argument",
                        command: CommandIds.EXTRA_ARGUMENT,
                        arguments: [textDocumentURI, diagnostics[i].range]
                    });
                    break;
                case dockerfile_utils_1.ValidationCode.INVALID_ESCAPE_DIRECTIVE:
                    commands.push({
                        title: "Convert to backslash",
                        command: CommandIds.DIRECTIVE_TO_BACKSLASH,
                        arguments: [textDocumentURI, diagnostics[i].range]
                    });
                    commands.push({
                        title: "Convert to backtick",
                        command: CommandIds.DIRECTIVE_TO_BACKTICK,
                        arguments: [textDocumentURI, diagnostics[i].range]
                    });
                    break;
                case dockerfile_utils_1.ValidationCode.INVALID_AS:
                    commands.push({
                        title: "Convert to AS",
                        command: CommandIds.CONVERT_TO_AS,
                        arguments: [textDocumentURI, diagnostics[i].range]
                    });
                    break;
                case dockerfile_utils_1.ValidationCode.UNKNOWN_HEALTHCHECK_FLAG:
                    commands.push({
                        title: "Convert to --interval",
                        command: CommandIds.FLAG_TO_HEALTHCHECK_INTERVAL,
                        arguments: [textDocumentURI, diagnostics[i].range]
                    });
                    commands.push({
                        title: "Convert to --retries",
                        command: CommandIds.FLAG_TO_HEALTHCHECK_RETRIES,
                        arguments: [textDocumentURI, diagnostics[i].range]
                    });
                    commands.push({
                        title: "Convert to --start-period",
                        command: CommandIds.FLAG_TO_HEALTHCHECK_START_PERIOD,
                        arguments: [textDocumentURI, diagnostics[i].range]
                    });
                    commands.push({
                        title: "Convert to --timeout",
                        command: CommandIds.FLAG_TO_HEALTHCHECK_TIMEOUT,
                        arguments: [textDocumentURI, diagnostics[i].range]
                    });
                    break;
                case dockerfile_utils_1.ValidationCode.UNKNOWN_ADD_FLAG:
                    commands.push({
                        title: "Convert to --chown",
                        command: CommandIds.FLAG_TO_CHOWN,
                        arguments: [textDocumentURI, diagnostics[i].range]
                    });
                    break;
                case dockerfile_utils_1.ValidationCode.UNKNOWN_COPY_FLAG:
                    commands.push({
                        title: "Convert to --chown",
                        command: CommandIds.FLAG_TO_CHOWN,
                        arguments: [textDocumentURI, diagnostics[i].range]
                    });
                    commands.push({
                        title: "Convert to --from",
                        command: CommandIds.FLAG_TO_COPY_FROM,
                        arguments: [textDocumentURI, diagnostics[i].range]
                    });
                    break;
            }
        }
        return commands;
    }
    createWorkspaceEdit(document, params) {
        let uri = params.arguments[0];
        let range = params.arguments[1];
        switch (params.command) {
            case CommandIds.LOWERCASE:
                const directive = document.getText().substring(document.offsetAt(range.start), document.offsetAt(range.end));
                return {
                    changes: {
                        [uri]: [
                            vscode_languageserver_1.TextEdit.replace(range, directive.toLowerCase())
                        ]
                    }
                };
            case CommandIds.UPPERCASE:
                let instruction = document.getText().substring(document.offsetAt(range.start), document.offsetAt(range.end));
                return {
                    changes: {
                        [uri]: [
                            vscode_languageserver_1.TextEdit.replace(range, instruction.toUpperCase())
                        ]
                    }
                };
            case CommandIds.EXTRA_ARGUMENT:
                return {
                    changes: {
                        [uri]: [
                            vscode_languageserver_1.TextEdit.del(range)
                        ]
                    }
                };
            case CommandIds.DIRECTIVE_TO_BACKSLASH:
                return {
                    changes: {
                        [uri]: [
                            vscode_languageserver_1.TextEdit.replace(range, '\\')
                        ]
                    }
                };
            case CommandIds.DIRECTIVE_TO_BACKTICK:
                return {
                    changes: {
                        [uri]: [
                            vscode_languageserver_1.TextEdit.replace(range, '`')
                        ]
                    }
                };
            case CommandIds.CONVERT_TO_AS:
                return {
                    changes: {
                        [uri]: [
                            vscode_languageserver_1.TextEdit.replace(range, "AS")
                        ]
                    }
                };
            case CommandIds.FLAG_TO_CHOWN:
                return {
                    changes: {
                        [uri]: [
                            vscode_languageserver_1.TextEdit.replace(range, "--chown")
                        ]
                    }
                };
            case CommandIds.FLAG_TO_HEALTHCHECK_INTERVAL:
                return {
                    changes: {
                        [uri]: [
                            vscode_languageserver_1.TextEdit.replace(range, "--interval")
                        ]
                    }
                };
            case CommandIds.FLAG_TO_HEALTHCHECK_RETRIES:
                return {
                    changes: {
                        [uri]: [
                            vscode_languageserver_1.TextEdit.replace(range, "--retries")
                        ]
                    }
                };
            case CommandIds.FLAG_TO_HEALTHCHECK_START_PERIOD:
                return {
                    changes: {
                        [uri]: [
                            vscode_languageserver_1.TextEdit.replace(range, "--start-period")
                        ]
                    }
                };
            case CommandIds.FLAG_TO_HEALTHCHECK_TIMEOUT:
                return {
                    changes: {
                        [uri]: [
                            vscode_languageserver_1.TextEdit.replace(range, "--timeout")
                        ]
                    }
                };
            case CommandIds.FLAG_TO_COPY_FROM:
                return {
                    changes: {
                        [uri]: [
                            vscode_languageserver_1.TextEdit.replace(range, "--from")
                        ]
                    }
                };
        }
        return null;
    }
}
exports.DockerCommands = DockerCommands;
