/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the RegistryUpdateParameters class.
 * @constructor
 * The parameters for updating a container registry.
 *
 * @member {object} [tags] The tags for the container registry.
 *
 * @member {boolean} [adminUserEnabled] The value that indicates whether the
 * admin user is enabled. This value is false by default.
 *
 * @member {object} [storageAccount] The parameters of a storage account for
 * the container registry. If specified, the storage account must be in the
 * same physical location as the container registry.
 *
 * @member {string} [storageAccount.name] The name of the storage account.
 *
 * @member {string} [storageAccount.accessKey] The access key to the storage
 * account.
 *
 */
class RegistryUpdateParameters {
  constructor() {
  }

  /**
   * Defines the metadata of RegistryUpdateParameters
   *
   * @returns {object} metadata of RegistryUpdateParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'RegistryUpdateParameters',
      type: {
        name: 'Composite',
        className: 'RegistryUpdateParameters',
        modelProperties: {
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          adminUserEnabled: {
            required: false,
            serializedName: 'properties.adminUserEnabled',
            type: {
              name: 'Boolean'
            }
          },
          storageAccount: {
            required: false,
            serializedName: 'properties.storageAccount',
            type: {
              name: 'Composite',
              className: 'StorageAccountParameters'
            }
          }
        }
      }
    };
  }
}

module.exports = RegistryUpdateParameters;
