/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the RegistryCreateParameters class.
 * @constructor
 * The parameters for creating a container registry.
 *
 * @member {object} [tags] The tags for the container registry.
 *
 * @member {string} location The location of the container registry. This
 * cannot be changed after the resource is created.
 *
 * @member {object} sku The SKU of the container registry.
 *
 * @member {string} [sku.name] The SKU name of the the container registry.
 * Required for registry creation. Allowed value: Basic.
 *
 * @member {string} [sku.tier] The SKU tier based on the SKU name. Possible
 * values include: 'Basic'
 *
 * @member {boolean} [adminUserEnabled] The value that indicates whether the
 * admin user is enabled. This value is false by default.
 *
 * @member {object} storageAccount The parameters of a storage account for the
 * container registry. If specified, the storage account must be in the same
 * physical location as the container registry.
 *
 * @member {string} [storageAccount.name] The name of the storage account.
 *
 * @member {string} [storageAccount.accessKey] The access key to the storage
 * account.
 *
 */
class RegistryCreateParameters {
  constructor() {
  }

  /**
   * Defines the metadata of RegistryCreateParameters
   *
   * @returns {object} metadata of RegistryCreateParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'RegistryCreateParameters',
      type: {
        name: 'Composite',
        className: 'RegistryCreateParameters',
        modelProperties: {
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          sku: {
            required: true,
            serializedName: 'sku',
            type: {
              name: 'Composite',
              className: 'Sku'
            }
          },
          adminUserEnabled: {
            required: false,
            serializedName: 'properties.adminUserEnabled',
            type: {
              name: 'Boolean'
            }
          },
          storageAccount: {
            required: true,
            serializedName: 'properties.storageAccount',
            type: {
              name: 'Composite',
              className: 'StorageAccountParameters'
            }
          }
        }
      }
    };
  }
}

module.exports = RegistryCreateParameters;
